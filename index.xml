<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gary talks tech</title>
    <link>https://gary-techs.github.io/</link>
    <description>Recent content on Gary talks tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 May 2020 16:53:14 +0400</lastBuildDate>
    
	<atom:link href="https://gary-techs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://gary-techs.github.io/about/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gary-techs.github.io/about/</guid>
      <description>Girish Sharma (Gary) is an experienced SW Developer working for over 15 years in IT. I can help you with projects in Golang, React, Node JS. Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>Benchmarking in Golang</title>
      <link>https://gary-techs.github.io/posts/benchmarking/</link>
      <pubDate>Sun, 31 May 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/benchmarking/</guid>
      <description>Benchmarking Go has capability for benchmarking like Java and other languages. It is the process of evaluating the performance of code.
In Go, benchmark tests are constructed similarly to conventional tests. Benchmark tests follow some strict guidelines and look like so:
import &amp;#34;testing&amp;#34; func Fib(n int) int { if n &amp;lt; 2 { return n } return Fib(n-1) + Fib(n-2) } func BenchmarkFib(b *testing.B) { for n := 0; n &amp;lt; b.</description>
    </item>
    
    <item>
      <title>Private Class Data pattern</title>
      <link>https://gary-techs.github.io/posts/private-class-data/</link>
      <pubDate>Sun, 12 Apr 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/private-class-data/</guid>
      <description>At times we need to make the data inside a struct Private. The private class data pattern secures the data within a class. This pattern encapsulates the initialization of the class data. The write privileges of properties within the private class are protected, and properties are set during construction.
Let&amp;rsquo;s start with a Account struct it has account details and a customer name. AccountDetails is the private attribute of AccountÂ , and CustomerName is the public attribute.</description>
    </item>
    
    <item>
      <title>Tracking errors in Golang</title>
      <link>https://gary-techs.github.io/posts/error-stack/</link>
      <pubDate>Tue, 31 Mar 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/error-stack/</guid>
      <description>Problem In Golang it&amp;rsquo;s difficult to pinpoint the source of an error. Langauges like Java have a stack trace to tell you where the error is coming from. This feature is not there in Golang by default.
In this article, we will discuss how to use the fmt, and the github.com/pkg/errors libraries to give us better error reporting.
Consider this example:
package main import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { result, err := funcA() if err !</description>
    </item>
    
    <item>
      <title>Higher Order Functions, Closures in Go</title>
      <link>https://gary-techs.github.io/posts/higher-order/</link>
      <pubDate>Sun, 02 Feb 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/higher-order/</guid>
      <description>Intro According to wiki a Higher-order function is something that does at least one of the following:-
 takes one or more functions as arguments returns a function as its result  Why would we need a HOF? Well think about all the repetetive tasks we do when iterating over any data set. We could be filtering the data set by applying different filters. It could be about mapping an old list to a new list etc.</description>
    </item>
    
    <item>
      <title>Interfaces and Reflection in Go </title>
      <link>https://gary-techs.github.io/posts/interface-golang/</link>
      <pubDate>Fri, 31 Jan 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/interface-golang/</guid>
      <description>Interfaces Interfaces are abstract data types. They are used to describe all the methods for a particular method set and the signatures for the methods. Suppose we have couple of structs Banana and Apple. They both implement an interface called Fruit. A Fruit can have a color and lets say price.
//Fruit Interface type Fruit interface { getColor() string getPrice() int } In order for Banana struct to be a fruit it has to implement two methods getColor and getPrice.</description>
    </item>
    
  </channel>
</rss>