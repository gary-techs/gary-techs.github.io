<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gary talks tech</title>
    <link>https://gary-techs.github.io/</link>
    <description>Recent content on Gary talks tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Nov 2020 09:45:14 +0400</lastBuildDate>
    
	<atom:link href="https://gary-techs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://gary-techs.github.io/about/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gary-techs.github.io/about/</guid>
      <description>Girish Sharma (Gary) is an experienced SW Developer working for over 15 years in IT. I can help you with projects in Golang, React, Node JS. Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>Don&#39;t use context API for state management</title>
      <link>https://gary-techs.github.io/posts/context-react/</link>
      <pubDate>Fri, 20 Nov 2020 09:45:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/context-react/</guid>
      <description>React Context API is not a state management tool This may sound obvious, but React Context API is not a state management tool per-se.
What I mean is that the Context alone is not enough to manage application&amp;rsquo;s state without a companion hook like useState or useReducer.
Creating a Context To create a new Context in React we call createContext():
const MyContext = React.createContext(); Once a Context is in place we can provide an initial value to the Context Provider on the value prop:</description>
    </item>
    
    <item>
      <title>Why should you use GraphQL</title>
      <link>https://gary-techs.github.io/posts/graphql/</link>
      <pubDate>Sun, 08 Nov 2020 12:19:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/graphql/</guid>
      <description>What is GraphQL? If you are a frontend web developer you have probably heard of GraphQL or maybe you have even used it, but what is it? GraphQL is a query language for APIs that allows you to write queries that define the data you receive. No more emailing the backend team to update an endpoint for your application. The client developer defines the data returned in the request.
What is a GraphQL Server/API?</description>
    </item>
    
    <item>
      <title>Reducers in JS</title>
      <link>https://gary-techs.github.io/posts/reducers-javascript/</link>
      <pubDate>Wed, 21 Oct 2020 12:43:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/reducers-javascript/</guid>
      <description>For most JavaScript applications, the reducer is an essential concept that helps us manage application state.
It is used in virtually every JavaScript library or framework, React, Angular and Vue, particularly in the state management libraries Redux and ngrx. It’s important to understand in order to grasp managing state in medium to large scale applications.
WHAT IS A REDUCER? A reducer is a very simple idea and it’s something that will be easy for you to grasp because, in a nutshell, it’s just a simple JS function.</description>
    </item>
    
    <item>
      <title>Wait for all the Go routines to finish</title>
      <link>https://gary-techs.github.io/posts/goroutines/</link>
      <pubDate>Mon, 31 Aug 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/goroutines/</guid>
      <description>Wait for all the Go routines to finish Go has a dedicated package sync that simplifies synchronization of goroutines. However in simple cases, goroutines can be synchronized with ordinary channels. In this post we will look at both methods on example.
Waiting for a single goroutine can be implemented with a help of a channel. When finished execution, worker goroutine sends a message to main goroutine awaiting for it. Like in the following example.</description>
    </item>
    
    <item>
      <title>Atomic Design fundamentals</title>
      <link>https://gary-techs.github.io/posts/atomic-design/</link>
      <pubDate>Sat, 01 Aug 2020 12:43:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/atomic-design/</guid>
      <description>For several years now, a component approach has been adopted by most JavaScript frameworks and libraries, whether it&amp;rsquo;s React, Vue or Angular. Traditional static web pages are becoming increasingly rare and are now real dynamic applications.
To make a dynamic application, we need to:
 Structure graphical components Create (or not) a graphical identity Creating a graphical identity using adapted components for specific use is difficult using an existing library like Bootstrap.</description>
    </item>
    
    <item>
      <title>Benchmarking in Golang</title>
      <link>https://gary-techs.github.io/posts/benchmarking/</link>
      <pubDate>Sun, 31 May 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/benchmarking/</guid>
      <description>Benchmarking Go has capability for benchmarking like Java and other languages. It is the process of evaluating the performance of code.
In Go, benchmark tests are constructed similarly to conventional tests. Benchmark tests follow some strict guidelines and look like so:
import &amp;#34;testing&amp;#34; func Fib(n int) int { if n &amp;lt; 2 { return n } return Fib(n-1) + Fib(n-2) } func BenchmarkFib(b *testing.B) { for n := 0; n &amp;lt; b.</description>
    </item>
    
    <item>
      <title>Private Class Data pattern</title>
      <link>https://gary-techs.github.io/posts/private-class-data/</link>
      <pubDate>Sun, 12 Apr 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/private-class-data/</guid>
      <description>At times we need to make the data inside a struct Private. The private class data pattern secures the data within a class. This pattern encapsulates the initialization of the class data. The write privileges of properties within the private class are protected, and properties are set during construction.
Let&amp;rsquo;s start with a Account struct it has account details and a customer name. AccountDetails is the private attribute of Account , and CustomerName is the public attribute.</description>
    </item>
    
    <item>
      <title>Tracking errors in Golang</title>
      <link>https://gary-techs.github.io/posts/error-stack/</link>
      <pubDate>Tue, 31 Mar 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/error-stack/</guid>
      <description>Problem In Golang it&amp;rsquo;s difficult to pinpoint the source of an error. Langauges like Java have a stack trace to tell you where the error is coming from. This feature is not there in Golang by default.
In this article, we will discuss how to use the fmt, and the github.com/pkg/errors libraries to give us better error reporting.
Consider this example:
package main import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { result, err := funcA() if err !</description>
    </item>
    
    <item>
      <title>Higher Order Functions, Closures in Go</title>
      <link>https://gary-techs.github.io/posts/higher-order/</link>
      <pubDate>Sun, 02 Feb 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/higher-order/</guid>
      <description>Intro According to wiki a Higher-order function is something that does at least one of the following:-
 takes one or more functions as arguments returns a function as its result  Why would we need a HOF? Well think about all the repetetive tasks we do when iterating over any data set. We could be filtering the data set by applying different filters. It could be about mapping an old list to a new list etc.</description>
    </item>
    
    <item>
      <title>Interfaces and Reflection in Go </title>
      <link>https://gary-techs.github.io/posts/interface-golang/</link>
      <pubDate>Fri, 31 Jan 2020 16:53:14 +0400</pubDate>
      
      <guid>https://gary-techs.github.io/posts/interface-golang/</guid>
      <description>Interfaces Interfaces are abstract data types. They are used to describe all the methods for a particular method set and the signatures for the methods. Suppose we have couple of structs Banana and Apple. They both implement an interface called Fruit. A Fruit can have a color and lets say price.
//Fruit Interface type Fruit interface { getColor() string getPrice() int } In order for Banana struct to be a fruit it has to implement two methods getColor and getPrice.</description>
    </item>
    
  </channel>
</rss>